name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise comment out the line below. 
pool: Default

variables:
  python.version: '3.7.6'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'AzureDevops'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'Devops'

stages:
- stage: BuildInfrastructure
  jobs:
  - job: BuildInfrastructure
    steps:
    # Install Terraform on the pipeline agent 
    - task: TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '1.2.9'
    
    # Run Terraform Init on the pipeline agent 
    # ToDo: Replace the resource group name, storage account name, and container name below
    - task: TerraformTaskV3@3
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'tfstate2795714930'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'

    # Run Terraform Validate    
    - task: TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'

    
    # Run Terraform Apply
    # ToDo: Change the workingDirectory path, as applicable to you
    - task: TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    # Destroy the resources in Azure
    # ToDo: Change the workingDirectory path, as applicable to you     

- stage: Build
  jobs:
      - job: Build
        pool:
          name: Default
        steps:
          - task: ArchiveFiles@2
            displayName: 'Archive FakeRestAPI'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
            displayName: 'Upload Package'
            artifact: drop-fakerestapi
          - task: ArchiveFiles@2
            displayName: 'Archive files'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
              includeRootFolder: false
              archiveType: zip
              archiveFile: $(Build.ArtifactStagingDirectory)/selenium-tests.zip
              replaceExistingArchive: true
          - upload: $(Build.ArtifactStagingDirectory)/selenium-tests.zip
            artifact: selenium

- stage: Deployment
  jobs:
      - deployment: DeployFakeRestAPI
        pool:
          name: Default
        environment: 'Devops'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  displayName: 'Deploy Azure Web App'
                  inputs:
                    azureSubscription: '$(azureServiceConnectionId)'
                    appType: 'webApp'
                    appName: 'Fake-API-Project3'
                    package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
                    deploymentMethod: 'auto'
      - deployment: DeployVirtualMachine
        environment:
          name:  'Devops'
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
                - task: Bash@3
                  displayName: 'Install Dependencies'
                  inputs:
                    targetType: 'inline'
                    script: |
                      #! /bin/bash
                      rm -rf /opt/jdk
                      mkdir /opt/jdk
                      wget https://github.com/adoptium/temurin8-binaries/releases/download/jdk8u322-b06/OpenJDK8U-jdk_x64_linux_hotspot_8u322b06.tar.gz
                      tar -zxf OpenJDK8U-jdk_x64_linux_hotspot_8u322b06.tar.gz -C /opt/jdk
                      export PATH=$PWD/jdk8u322-b06/bin:$PATH
                      update-alternatives --install /usr/bin/java java /opt/jdk/jdk8u322-b06/bin/java 100 && \
                      update-alternatives --install /usr/bin/javac javac /opt/jdk/jdk8u322-b06/bin/javac 100 && \
                      update-alternatives --install /usr/bin/jar jar /opt/jdk/jdk8u322-b06/bin/jar 100 && \
                      echo 'export JAVA_HOME=/opt/jdk/jdk8u322-b06/' >> /etc/profile.d/java.sh
                      java -version

                      sudo apt-get upgrade -y
                      sudo apt-get install python3-pip -y
                      sudo apt-get install unzip -y
                      sudo apt-get install -y chromium-browser
                      pip3 install selenium==4.2.0 --force-reinstall
                      pip3 install webdriver-manager
                      # download chrome driver
                      FILE=chromedriver_linux64.zip
                      if [ -f "$FILE" ]; then
                        echo "$FILE exists."
                      else
                        wget https://chromedriver.storage.googleapis.com/2.41/chromedriver_linux64.zip
                      fi
                      # install chrome driver
                      unzip chromedriver_linux64.zip
                      sudo mv chromedriver /usr/bin/chromedriver
                      sudo chown root:root /usr/bin/chromedriver
                      sudo chmod +x /usr/bin/chromedriver
                      chromium-browser -version
                      chromedriver --version
                      # install Log Analytics Agent
                      wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh && sh onboard_agent.sh -w cbe0ec30-c458-41a4-9b6b-421205cf995e -s CI/JBZBRaayR6cbyEZVvFucqeRXRNVICiKRk1GUczQcAb+kQ+hIReFxRJ2AComJs55gkmkXRrvJEwTKAsmL9gA== -d opinsights.azure.com
                      
- stage: SeleniumTests
  jobs:
      - deployment: SeleniumTests
        environment:
          name:  'Devops'
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  displayName: 'Download Selenium'
                  artifact: selenium
                - task: Bash@3
                  displayName: UI Tests
                  inputs:
                    targetType: 'inline'
                    script: |
                      unzip -o $(Pipeline.Workspace)/selenium/selenium-tests.zip -d .
                      sudo mkdir -p /var/logs
                      python3 uitests.py > ui-logs.log
                      cat ui-logs.log
                      sudo mv ui-logs.log /var/logs

- stage: PostmanTests
  jobs:
      - job: PostmanTests
        steps:
          - task: NodeTool@0
            displayName: Install Node v16.X
            inputs:
              versionSpec: '16.x'
          - task: CmdLine@2
            displayName: Install Newman
            inputs:
              script: 'npm install -g newman'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
          - task: CmdLine@2
            displayName: Run Regression Tests and Validate Data Tests
            inputs:
              script: 'newman run automatedtesting/postman/TestSuite.json -e automatedtesting/postman/TestSuite.Environment.json --delay-request 5000 --bail newman -x --reporters cli,junit --reporter-junit-export Results/RegressionTests.xml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
            continueOnError: true
          - task: CmdLine@2
            inputs:
              script: 'ls'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
          - task: PublishTestResults@2
            displayName: Publish Test Reports
            condition: always()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '$(System.DefaultWorkingDirectory)/Results/*.xml'
- stage: JMeterTests
  jobs:
      - job: JMeterTests
        steps:
          - task: JMeterInstaller@0
            inputs:
              jmeterVersion: '5.6.2'
          - task: Bash@3
            displayName: EnduranceTest
            inputs:
              targetType: 'inline'
              script: 'jmeter -n -t automatedtesting/jmeter/EnduranceTestSuite.jmx -Jresdir=automatedtesting/jmeter/endurancepages.csv -l automatedtesting/jmeter/report/enduranceresults.jtl -e -o automatedtesting/jmeter/endurancereport'
          - task: Bash@3
            displayName: StressTest
            inputs:
              targetType: 'inline'
              script: 'jmeter -n -t automatedtesting/jmeter/StressTestSuite.jmx -Jresdir=automatedtesting/jmeter/stresspages.csv -l automatedtesting/jmeter/report/stressresults.jtl -e -o automatedtesting/jmeter/stressreport'
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: 'automatedtesting/jmeter'
              ArtifactName: 'jmeter'
              publishLocation: 'Container'